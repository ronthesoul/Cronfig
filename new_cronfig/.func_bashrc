#!/bin/bash
function cl (){
cd $1
ls
}

function zl(){
z $1
ls
}

function brcs () { 
    local backup_dir="$HOME/.bashrc_backup"
    mkdir -p "$backup_dir" >/dev/null 2>&1

    if [[ -f "$backup_dir/bashrc_prev" ]]; then
        mv "$backup_dir/bashrc_prev" "$backup_dir/bashrc_prev2" >/dev/null 2>&1
    fi

    if [[ -f "$HOME/.bashrc" ]]; then
        cp "$HOME/.bashrc" "$backup_dir/bashrc_prev" >/dev/null 2>&1
    fi

    source "$HOME/.bashrc" >/dev/null 2>&1
}




function get_container_ip(){
docker inspect $1 | jq -r '.[0].NetworkSettings.Networks.bridge.IPAddress'
}
function create_sandbox(){
malware_volume='/var/sandbox/malware'

if [[ ! -e $malware_volume ]]; then
sudo mkdir -p $malware_volume
fi

docker run -it \
  --rm \
  --cap-drop=ALL \
  --read-only \
  --network none \
  --security-opt=no-new-privileges \
  -v $malware_volume:/malware:ro \
  $1
}
function denter(){
docker exec -it "$1" /bin/bash
}
function dpurge(){
    docker stop $(docker ps -q)
    docker rm $(docker ps -a -q -f "status=exited")
}

function create_gh_repo () {
  local repo_name="$1"
  local description="$2"
  local visibility="${3:-private}"

  if ! command -v gh >/dev/null 2>&1; then
    echo "[INFO] GitHub CLI (gh) not found. Installing..."

    if [[ -f /etc/debian_version ]]; then
      sudo apt install -y gh
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      brew install gh
    else
      echo "[ERROR] Unsupported OS. Please install gh manually."
      return 1
    fi
  fi

  if ! gh auth status >/dev/null 2>&1; then
    echo "[INFO] Authenticating with GitHub..."
    gh auth login
  fi

  echo "[INFO] Creating GitHub repository: $repo_name"
  gh repo create "$repo_name" --description "$description" --"$visibility" --confirm
}

function delete_gh_repo() {
  local repo_name="$1"
  local owner="${2:-$(gh api user | jq -r .login)}"  # default: your username

  if [[ -z "$repo_name" ]]; then
    echo "[ERROR] Repo name is required."
    return 1
  fi

  if ! command -v gh >/dev/null 2>&1; then
    echo "[ERROR] GitHub CLI (gh) not found."
    return 1
  fi

  if ! gh auth status >/dev/null 2>&1; then
    echo "[INFO] Authenticating with GitHub..."
    gh auth login
  fi

  echo "[WARNING] Deleting repo: $owner/$repo_name"
  read -p "Are you sure? Type 'yes' to continue: " confirm
  if [[ "$confirm" != "yes" ]]; then
    echo "[INFO] Aborted."
    return 0
  fi

  gh api --method DELETE "repos/$owner/$repo_name"
  echo "[INFO] Repository deleted: $owner/$repo_name"
}

function gall() {
  commit="${1:-New Commit}"
  git add -A && git commit -a -m "$commit" && git push origin main
}



function change_repo (){
repo_profile=$1
repo_name=$2

git remote add origin git@github.com:$repo_name/$repo_name
git remote set-url origin git@github.com:$repo_profile/$repo_name
}

function tfa () {
  if terraform apply -auto-approve; then
    message="✅ Terraform apply completed successfully"
  else
    message="❌ Terraform apply failed"
  fi

  payload=$(jq -n --arg msg "$message" '{text: $msg}')

  curl -X POST -H 'Content-type: application/json' \
       --data "$payload" \
       "$SLACK_WEBHOOK_URL"
}


function tfd () {
  if terraform destroy -auto-approve; then
    message="✅ Terraform destroy completed successfully"
  else
    message="❌ Terraform destroy failed"
  fi

  payload=$(jq -n --arg msg "$message" '{text: $msg}')

  curl -X POST -H 'Content-type: application/json' \
       --data "$payload" \
       "$SLACK_WEBHOOK_URL"
}

function tfall () {
  terraform init
  if [ $? -ne 0 ]; then
    message="❌ Terraform init failed"
  else
    terraform plan
    if [ $? -ne 0 ]; then
      message="❌ Terraform plan failed"
    else
      if terraform apply -auto-approve; then
        message="✅ Terraform apply completed successfully"
      else
        message="❌ Terraform apply failed"
      fi
    fi
  fi

  payload=$(jq -n --arg msg "$message" '{text: $msg}')
  curl -X POST -H 'Content-type: application/json' \
       --data "$payload" \
       "$SLACK_WEBHOOK_URL"
}


trap 'PREV_COMMAND=$THIS_COMMAND; THIS_COMMAND=$BASH_COMMAND' DEBUG
nots() {
  local status=$?
  local msg="$PREV_COMMAND"
  curl -X POST -H "Content-type: application/json" \
    --data "{\"text\":\"✅ Command finished: $msg (Exit: $status)\"}" \
    "$NOTS_SLACK_URL"
}

function kube_cleanup() {
  local name="$1"
  kubectl delete deployment "$name" 2>/dev/null
  kubectl delete service "$name" 2>/dev/null
  echo "$name Was Annihilated"
}

function kube_expose_deployment() {
  local name="$1"
  local port="{3:-80}"
  kubectl expose deployment "$name" --port="$port" --type=NodePort
  echo "$name was exposed on port $port"
}

function kall() {
echo "#####################Pods info#########################"
kubectl get pod -o wide
echo "#####################Nodes info########################"
kubectl get node -o wide
echo "#####################Service info######################"
kubectl get svc -o wide
echo "#####################Deployment info###################"
kubectl get deployment -o wide
}

synconfig() {
    read -p "Are you sure you want to sync your cronfig with cloud? [y/N] " user_warning

    case "$user_warning" in
        y|Y|yes|Yes|YES)
            curl -o ~/.alias_bashrc https://raw.githubusercontent.com/ronthesoul/Cronfig/main/new_cronfig/.alias_bashrc
            curl -o ~/.func_bashrc https://raw.githubusercontent.com/ronthesoul/Cronfig/main/new_cronfig/.func_bashrc
            source ~/.bashrc
            ;;
        n|N|no|No|NO)
            return 1
            ;;
        *)
            echo "Invalid option."
            ;;
    esac
}


function kpw() {
kubectl port-forward $1 $2 --request-timeout='0' 2>&1 >/dev/null &
}

function kenter() {
  local pod="$1"
  [ -z "$pod" ] && echo "Usage: kenter <pod-name>" && return 1
  kubectl exec -it "$pod" -- /bin/bash || kubectl exec -it "$pod" -- /bin/sh
}


logv2() {
  local level="$1"
  shift
  local msg="$*"
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $msg" | tee -a "$LOGFILE"

  case "$level" in
    success) success "$msg" ;;
    warn)    warn "$msg" ;;
    error)   error "$msg" ;;
    info)    info "$msg" ;;
    *)       echo "$msg" ;;
  esac
}

#Helm
function hmre () {
  helmname=$1
  helmdir=${2:-$1}
  helm uninstall "$helmname" && helm install "$helmname" "$helmdir" || \
  echo "Restarting helm chart failed. Please check your values."
}

















